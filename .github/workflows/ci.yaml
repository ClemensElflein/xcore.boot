name: CI

on:
  pull_request:
  push:
    branches:
      - 'main'
      - 'feature/*'

jobs:
  pre-commit:
    name: "Run Pre-Commit Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: pre-commit/action@v3.0.1
  artifacts:
    name: "Build Artifacts"
    needs: pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: pre-commit/action@v3.0.1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        uses: docker/build-push-action@v6
        with:
          push: false
          context: bootloader
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=local,dest=./out
      - name: Copy Artifacts
        run: |
          mkdir artifacts
          cp -r ./host-software ./artifacts
          mkdir ./artifacts/bootloader
          cp ./out/* ./artifacts/bootloader
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bootloader
          path: artifacts/
  build-host-docker:
    name: "Build Host Software Docker Image"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./host-software
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: host-software
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
